"use strict";(self.webpackChunkdatastrato_next=self.webpackChunkdatastrato_next||[]).push([[1778],{73435:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>h});var n=t(97458),l=t(37627),s=t(30982),i=t(53765);const r={title:"Manage metadata using Gravitino",slug:"/manage-metadata-using-gravitino",date:new Date("2023-12-10T00:00:00.000Z"),keyword:"Gravitino metadata manage",license:"Copyright 2023 Datastrato Pvt Ltd. This software is licensed under the Apache License version 2."},o=void 0,c={id:"manage-metadata-using-gravitino",title:"Manage metadata using Gravitino",description:"This page introduces how to manage metadata by Gravitino. Through Gravitino, you can create, edit, and delete metadata",source:"@site/versioned_docs/version-0.3.0/manage-metadata-using-gravitino.md",sourceDirName:".",slug:"/manage-metadata-using-gravitino",permalink:"/docs/0.3.0/manage-metadata-using-gravitino",draft:!1,unlisted:!1,editUrl:"https://github.com/datastrato/datastrato.com/edit/master/docs/manage-metadata-using-gravitino.md",tags:[],version:"0.3.0",frontMatter:{title:"Manage metadata using Gravitino",slug:"/manage-metadata-using-gravitino",date:"2023-12-10T00:00:00.000Z",keyword:"Gravitino metadata manage",license:"Copyright 2023 Datastrato Pvt Ltd. This software is licensed under the Apache License version 2."},sidebar:"tutorialSidebar",previous:{title:"How to use the playground",permalink:"/docs/0.3.0/how-to-use-the-playground"},next:{title:"Introduction",permalink:"/docs/0.3.0/api/rest/gravitino-rest-api"}},d={},h=[{value:"Metalake operations",id:"metalake-operations",level:2},{value:"Create a metalake",id:"create-a-metalake",level:3},{value:"Load a metalake",id:"load-a-metalake",level:3},{value:"Alter a metalake",id:"alter-a-metalake",level:3},{value:"Drop a metalake",id:"drop-a-metalake",level:3},{value:"List all metalakes",id:"list-all-metalakes",level:3},{value:"Catalogs operations",id:"catalogs-operations",level:2},{value:"Create a catalog",id:"create-a-catalog",level:3},{value:"Load a catalog",id:"load-a-catalog",level:3},{value:"Alter a catalog",id:"alter-a-catalog",level:3},{value:"Drop a catalog",id:"drop-a-catalog",level:3},{value:"List all catalogs in a metalake",id:"list-all-catalogs-in-a-metalake",level:3},{value:"Schemas operations",id:"schemas-operations",level:2},{value:"Create a schema",id:"create-a-schema",level:3},{value:"Load a schema",id:"load-a-schema",level:3},{value:"Alter a schema",id:"alter-a-schema",level:3},{value:"Drop a schema",id:"drop-a-schema",level:3},{value:"List all schemas under a catalog",id:"list-all-schemas-under-a-catalog",level:3},{value:"Tables operations",id:"tables-operations",level:2},{value:"Create a table",id:"create-a-table",level:3},{value:"Gravitino table column type",id:"gravitino-table-column-type",level:4},{value:"Table property and type mapping",id:"table-property-and-type-mapping",level:4},{value:"Load a table",id:"load-a-table",level:3},{value:"Alter a table",id:"alter-a-table",level:3},{value:"Drop a table",id:"drop-a-table",level:3},{value:"List all tables under a schema",id:"list-all-tables-under-a-schema",level:3}];function p(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.p,{children:"This page introduces how to manage metadata by Gravitino. Through Gravitino, you can create, edit, and delete metadata\nlike metalakes, catalogs, schemas, and tables. This page includes the following contents:"}),"\n",(0,n.jsx)(a.p,{children:"In this document, Gravitino uses Apache Hive catalog as an example to show how to manage metadata by Gravitino. Other catalogs are similar to Hive catalog,\nbut they may have some differences, especially in catalog property, table property and column type. For more details, please refer to the related doc."}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/apache-hive-catalog",children:(0,n.jsx)(a.strong,{children:"Apache Hive"})})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-postgresql-catalog",children:(0,n.jsx)(a.strong,{children:"MySQL"})})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-mysql-catalog",children:(0,n.jsx)(a.strong,{children:"PostgreSQL"})})}),"\n",(0,n.jsx)(a.li,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/lakehouse-iceberg-catalog",children:(0,n.jsx)(a.strong,{children:"Apache Iceberg"})})}),"\n"]}),"\n",(0,n.jsxs)(a.p,{children:["Assuming Gravitino has just started, and the host and port is ",(0,n.jsx)(a.code,{children:"http://localhost:8090"}),"."]}),"\n",(0,n.jsx)(a.h2,{id:"metalake-operations",children:"Metalake operations"}),"\n",(0,n.jsx)(a.h3,{id:"create-a-metalake",children:"Create a metalake"}),"\n",(0,n.jsxs)(a.p,{children:["You can create a metalake by sending a ",(0,n.jsx)(a.code,{children:"POST"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes"})," endpoint or just use the Gravitino Java client.\nThe following is an example of creating a metalake:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{"name":"metalake","comment":"comment","properties":{}}\' \\\nhttp://localhost:8090/api/metalakes\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient gravitinoClient = GravitinoClient\n    .builder("http://127.0.0.1:8090")\n    .build();\nGravitinoMetaLake newMetalake = gravitinoClient.createMetalake(\n    NameIdentifier.of("metalake"),\n    "This is a new metalake",\n    new HashMap<>());\n  // ...\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"load-a-metalake",children:"Load a metalake"}),"\n",(0,n.jsxs)(a.p,{children:["You can create a metalake by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}"})," endpoint or just use the Gravitino Java client. The following is an example of loading a metalake:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json"  http://localhost:8090/api/metalakes/metalake\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\nGravitinoMetaLake loaded = gravitinoClient.loadMetalake(\n    NameIdentifier.of("metalake"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"alter-a-metalake",children:"Alter a metalake"}),"\n",(0,n.jsxs)(a.p,{children:["You can modify a metalake by sending a ",(0,n.jsx)(a.code,{children:"PUT"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}"})," endpoint or just use the Gravitino Java client. The following is an example of altering a metalake:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "rename",\n      "newName": "metalake"\n    },\n    {\n      "@type": "setProperty",\n      "property": "key2",\n      "value": "value2"\n    }\n  ]\n}\' http://localhost:8090/api/metalakes/new_metalake\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\nGravitinoMetaLake renamed = gravitinoClient.alterMetalake(\n    NameIdentifier.of("new_metalake"),\n    MetalakeChange.rename("new_metalake_renamed")\n);\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"Currently, Gravitino supports the following changes to a metalake:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Supported modification"}),(0,n.jsx)(a.th,{children:"JSON"}),(0,n.jsx)(a.th,{children:"Java"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Rename metalake"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"rename","newName":"metalake_renamed"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'MetalakeChange.rename("metalake_renamed")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update comment"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateComment","newComment":"new_comment"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'MetalakeChange.updateComment("new_comment")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Set a property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"setProperty","property":"key1","value":"value1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'MetalakeChange.setProperty("key1", "value1")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Remove a property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"removeProperty","property":"key1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'MetalakeChange.removeProperty("key1")'})})]})]})]}),"\n",(0,n.jsx)(a.h3,{id:"drop-a-metalake",children:"Drop a metalake"}),"\n",(0,n.jsxs)(a.p,{children:["You can remove a metalake by sending a ",(0,n.jsx)(a.code,{children:"DELETE"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}"})," endpoint or just use the Gravitino Java client. The following is an example of dropping a metalake:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" http://localhost:8090/api/metalakes/metalake\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\nboolean success = gravitinoClient.dropMetalake(\n    NameIdentifier.of("metalake")\n);\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.admonition,{type:"note",children:(0,n.jsx)(a.p,{children:"Drop a metalake only removes metadata about the metalake and catalogs, schemas, tables under the metalake in Gravitino, It doesn't remove the real schema and table data in Apache Hive."})}),"\n",(0,n.jsx)(a.h3,{id:"list-all-metalakes",children:"List all metalakes"}),"\n",(0,n.jsxs)(a.p,{children:["You can list metalakes by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes"})," endpoint or just use the Gravitino Java client. The following is an example of listing all metalake name:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json"  http://localhost:8090/api/metalakes\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:"// ...\nGravitinoMetaLake[] allMetalakes = gravitinoClient.listMetalakes();\n// ...\n"})})})]}),"\n",(0,n.jsx)(a.h2,{id:"catalogs-operations",children:"Catalogs operations"}),"\n",(0,n.jsx)(a.h3,{id:"create-a-catalog",children:"Create a catalog"}),"\n",(0,n.jsxs)(a.admonition,{type:"tip",children:[(0,n.jsx)(a.p,{children:"Users should create a metalake before creating a catalog."}),(0,n.jsx)(a.p,{children:"The code below is an example of creating a Hive catalog. For other catalogs, the code is similar, but the catalog type, provider, and properties may be different. For more details, please refer to the related doc."})]}),"\n",(0,n.jsxs)(a.p,{children:["You can create a catalog by sending a ",(0,n.jsx)(a.code,{children:"POST"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs"})," endpoint or just use the Gravitino Java client. The following is an example of creating a catalog:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "catalog",\n  "type": "RELATIONAL",\n  "comment": "comment",\n  "provider": "hive",\n  "properties": {\n    "metastore.uris": "thrift://localhost:9083"\n  }\n}\' http://localhost:8090/api/metalakes/metalake/catalogs\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient gravitinoClient = GravitinoClient\n    .builder("http://127.0.0.1:8090")\n    .build();\n\n// Assuming you have just created a metalake named `metalake`\nGravitinoMetaLake gravitinoMetaLake =\n    gravitinoClient.loadMetalake(NameIdentifier.of("metalake"));\n\nMap<String, String> hiveProperties = ImmutableMap.<String, String>builder()\n        // You should replace the following with your own hive metastore uris that Gravitino can access\n        .put("metastore.uris", "thrift://localhost:9083")\n        .build();\n\nCatalog catalog = gravitinoMetaLake.createCatalog(\n    NameIdentifier.of("metalake", "catalog"),\n    Type.RELATIONAL,\n    "hive", // provider, We support hive, jdbc-mysql, jdbc-postgresql, lakehouse-iceberg, etc.\n    "This is a hive catalog",\n    hiveProperties); // Please change the properties according to the value of provider.\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"Currently, Gravitino supports the following catalog providers:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Catalog provider"}),(0,n.jsx)(a.th,{children:"Catalog property"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"hive"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/apache-hive-catalog#catalog-properties",children:"Hive catalog property"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/lakehouse-iceberg-catalog#catalog-properties",children:"Iceberg catalog property"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"jdbc-mysql"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-mysql-catalog#catalog-properties",children:"MySQL catalog property"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-postgresql-catalog#catalog-properties",children:"PostgreSQL catalog property"})})]})]})]}),"\n",(0,n.jsx)(a.h3,{id:"load-a-catalog",children:"Load a catalog"}),"\n",(0,n.jsxs)(a.p,{children:["You can load a catalog by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or just use the Gravitino Java client. The following is an example of loading a catalog:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" http://localhost:8090/api/metalakes/metalake/catalogs/catalog\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a metalake named `metalake`\nGravitinoMetaLake gravitinoMetaLake =\n    gravitinoClient.loadMetalake(NameIdentifier.of("metalake"));\n\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"alter-a-catalog",children:"Alter a catalog"}),"\n",(0,n.jsxs)(a.p,{children:["You can modify a catalog by sending a ",(0,n.jsx)(a.code,{children:"PUT"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or just use the Gravitino Java client. The following is an example of altering a catalog:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "rename",\n      "newName": "alter_catalog"\n    },\n    {\n      "@type": "setProperty",\n      "property": "key3",\n      "value": "value3"\n    }\n  ]\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a metalake named `metalake`\nGravitinoMetaLake gravitinoMetaLake =\n    gravitinoClient.loadMetalake(NameIdentifier.of("metalake"));\n\nCatalog catalog = gravitinoMetaLake.alterCatalog(NameIdentifier.of("metalake", "catalog"),\n    CatalogChange.rename("alter_catalog"), CatalogChange.updateComment("new comment"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"Currently, Gravitino supports the following changes to a catalog:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Supported modification"}),(0,n.jsx)(a.th,{children:"JSON"}),(0,n.jsx)(a.th,{children:"Java"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Rename metalake"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"rename","newName":"metalake_renamed"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'CatalogChange.rename("catalog_renamed")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update comment"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateComment","newComment":"new_comment"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'CatalogChange.updateComment("new_comment")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Set a property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"setProperty","property":"key1","value":"value1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'CatalogChange.setProperty("key1", "value1")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Remove a property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"removeProperty","property":"key1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'CatalogChange.removeProperty("key1")'})})]})]})]}),"\n",(0,n.jsx)(a.h3,{id:"drop-a-catalog",children:"Drop a catalog"}),"\n",(0,n.jsxs)(a.p,{children:["You can remove a catalog by sending a ",(0,n.jsx)(a.code,{children:"DELETE"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}"})," endpoint or just use the Gravitino Java client. The following is an example of dropping a catalog:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a metalake named `metalake`\nGravitinoMetaLake gravitinoMetaLake =\n    gravitinoClient.loadMetalake(NameIdentifier.of("metalake"));\ngravitinoMetaLake.dropCatalog(NameIdentifier.of("metalake", "catalog"));\n// ...\n  // ...\n'})})})]}),"\n",(0,n.jsx)(a.admonition,{type:"note",children:(0,n.jsx)(a.p,{children:"Drop a catalog only removes metadata about the catalog and schemas, tables under the catalog in Gravitino, It doesn't remove the real data (table and schema) in Apache Hive."})}),"\n",(0,n.jsx)(a.h3,{id:"list-all-catalogs-in-a-metalake",children:"List all catalogs in a metalake"}),"\n",(0,n.jsxs)(a.p,{children:["You can list all catalogs under a metalake by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs"})," endpoint or just use the Gravitino Java client. The following is an example of listing all catalogs in\na metalake:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a metalake named `metalake`\nGravitinoMetaLake gravitinoMetaLake =\n    gravitinoClient.loadMetalake(NameIdentifier.of("metalake"));\n\nNameIdentifier[] catalogsIdents = gravitinoMetaLake.listCatalogs(Namespace.ofCatalog("metalake"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.h2,{id:"schemas-operations",children:"Schemas operations"}),"\n",(0,n.jsx)(a.admonition,{type:"tip",children:(0,n.jsx)(a.p,{children:"Users should create a metalake and a catalog before creating a schema."})}),"\n",(0,n.jsx)(a.h3,{id:"create-a-schema",children:"Create a schema"}),"\n",(0,n.jsxs)(a.p,{children:["You can create a schema by sending a ",(0,n.jsx)(a.code,{children:"POST"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas"})," endpoint or just use the Gravitino Java client. The following is an example of creating a schema:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "schema",\n  "comment": "comment",\n  "properties": {\n    "key1": "value1"\n  }\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient gravitinoClient = GravitinoClient\n    .builder("http://127.0.0.1:8090")\n    .build();\n\n// Assuming you have just created a metalake named `metalake`\nGravitinoMetaLake gravitinoMetaLake =\n    gravitinoClient.loadMetalake(NameIdentifier.of("metalake"));\n\n// Assuming you have just created a Hive catalog named `catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\n\nMap<String, String> schemaProperties = ImmutableMap.<String, String>builder()\n    .build();\nSchema schema = supportsSchemas.createSchema(\n    NameIdentifier.of("metalake", "catalog", "schema"),\n    "This is a schema",\n    schemaProperties\n);\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"Currently, Gravitino supports the following schema property:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Catalog provider"}),(0,n.jsx)(a.th,{children:"Schema property"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"hive"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/apache-hive-catalog#schema-properties",children:"Hive schema property"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/lakehouse-iceberg-catalog#schema-properties",children:"Iceberg scheme property"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"jdbc-mysql"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-mysql-catalog#schema-properties",children:"MySQL schema property"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-postgresql-catalog#schema-properties",children:"PostgreSQL schema property"})})]})]})]}),"\n",(0,n.jsx)(a.h3,{id:"load-a-schema",children:"Load a schema"}),"\n",(0,n.jsxs)(a.p,{children:["You can create a schema by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}"})," endpoint or just use the Gravitino Java client. The following is an example of loading a schema:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET \\-H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\nSupportsSchemas supportsSchemas = catalog.asSchemas();\nSchema schema = supportsSchemas.loadSchema(NameIdentifier.of("metalake", "catalog", "schema"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"alter-a-schema",children:"Alter a schema"}),"\n",(0,n.jsxs)(a.p,{children:["You can change a schema by sending a ",(0,n.jsx)(a.code,{children:"PUT"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}"})," endpoint or just use the Gravitino Java client. The following is an example of modifying a schema:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "removeProperty",\n      "property": "key2"\n    }, {\n      "@type": "setProperty",\n      "property": "key3",\n      "value": "value3"\n    }\n  ]\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "hive_catalog"));\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\n\nSchema schema = supportsSchemas.alterSchema(NameIdentifier.of("metalake", "hive_catalog", "schema"),\n    SchemaChange.removeProperty("key1"),\n    SchemaChange.setProperty("key2", "value2"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"Currently, Gravitino supports the following changes to a schema:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Supported modification"}),(0,n.jsx)(a.th,{children:"JSON"}),(0,n.jsx)(a.th,{children:"Java"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Set a property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"setProperty","property":"key1","value":"value1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'SchemaChange.setProperty("key1", "value1")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Remove a property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"removeProperty","property":"key1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'SchemaChange.removeProperty("key1")'})})]})]})]}),"\n",(0,n.jsx)(a.h3,{id:"drop-a-schema",children:"Drop a schema"}),"\n",(0,n.jsxs)(a.p,{children:["You can remove a schema by sending a ",(0,n.jsx)(a.code,{children:"DELETE"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}"})," endpoint or just use the Gravitino Java client. The following is an example of dropping a schema:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'// cascade can be true or false\ncurl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema?cascade=true\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\n// cascade can be true or false\nsupportsSchemas.dropSchema(NameIdentifier.of("metalake", "catalog", "schema"), true);\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"list-all-schemas-under-a-catalog",children:"List all schemas under a catalog"}),"\n",(0,n.jsxs)(a.p,{children:["You can alter all schemas under a catalog by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas"})," endpoint or just use the Gravitino Java client. The following is an example of list all schema\nin a catalog:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nSupportsSchemas supportsSchemas = catalog.asSchemas();\nNameIdentifier[] schemas = supportsSchemas.listSchemas(Namespace.ofSchema("metalake", "catalog"));\n'})})})]}),"\n",(0,n.jsx)(a.h2,{id:"tables-operations",children:"Tables operations"}),"\n",(0,n.jsx)(a.admonition,{type:"tip",children:(0,n.jsx)(a.p,{children:"Users should create a metalake, a catalog and a schema before creating a table."})}),"\n",(0,n.jsx)(a.h3,{id:"create-a-table",children:"Create a table"}),"\n",(0,n.jsxs)(a.p,{children:["You can create a table by sending a ",(0,n.jsx)(a.code,{children:"POST"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables"})," endpoint or just use the Gravitino Java client. The following is an example of creating a table:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "table",\n  "columns": [\n    {\n      "name": "id",\n      "type": "integer",\n      "nullable": true,\n      "comment": "Id of the user"\n    },\n    {\n      "name": "name",\n      "type": "varchar(2000)",\n      "nullable": true,\n      "comment": "Name of the user"\n    }\n  ],\n  "comment": "Create a new Table",\n  "properties": {\n    "format": "ORC"\n  }\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'GravitinoClient gravitinoClient = GravitinoClient\n    .builder("http://127.0.0.1:8090")\n    .build();\n\n// Assuming you have just created a metalake named `metalake`\nGravitinoMetaLake gravitinoMetaLake =\n    gravitinoClient.loadMetalake(NameIdentifier.of("metalake"));\n\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\n\n// This is an example of creating a Hive table, you should refer to the related doc to get the\n// table properties of other catalogs.\nMap<String, String> tablePropertiesMap = ImmutableMap.<String, String>builder()\n        .put("format", "ORC")\n        // For more table properties, please refer to the related doc.\n        .build();\ntableCatalog.createTable(\n    NameIdentifier.of("metalake", "catalog", "schema", "table"),\n    new ColumnDTO[] {\n        ColumnDTO.builder()\n            .withComment("Id of the user")\n            .withName("id")\n            .withDataType(Types.IntegerType.get())\n            .withNullable(true)\n            .build(),\n        ColumnDTO.builder()\n            .withComment("Name of the user")\n            .withName("name")\n            .withDataType(Types.VarCharType.of(1000))\n            .withNullable(true)\n            .build(),\n    },\n    "Create a new Table",\n    tablePropertiesMap\n);\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"In order to create a table, you need to provide the following information:"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"Table column name and type"}),"\n",(0,n.jsx)(a.li,{children:"Table property"}),"\n"]}),"\n",(0,n.jsx)(a.h4,{id:"gravitino-table-column-type",children:"Gravitino table column type"}),"\n",(0,n.jsx)(a.p,{children:"The following types that Gravitino supports:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Type"}),(0,n.jsx)(a.th,{children:"Java"}),(0,n.jsx)(a.th,{children:"JSON"}),(0,n.jsx)(a.th,{children:"Description"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Boolean"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.BooleanType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"boolean"})}),(0,n.jsx)(a.td,{children:"Boolean type"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Byte"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.ByteType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"byte"})}),(0,n.jsx)(a.td,{children:"Byte type, indicates a numerical value of 1 byte"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Short"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.ShortType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"short"})}),(0,n.jsx)(a.td,{children:"Short type, indicates a numerical value of 2 bytes"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Integer"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.IntegerType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"integer"})}),(0,n.jsx)(a.td,{children:"Integer type, indicates a numerical value of 4 bytes"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Long"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.LongType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"long"})}),(0,n.jsx)(a.td,{children:"Long type, indicates a numerical value of 8 bytes"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Float"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.FloatType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"float"})}),(0,n.jsx)(a.td,{children:"Float type, indicates a single-precision floating point number"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Double"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.DoubleType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"double"})}),(0,n.jsx)(a.td,{children:"Double type, indicates a double-precision floating point number"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Decimal(precision, scale)"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.DecimalType.of(precision, scale)"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"decimal(p, s)"})}),(0,n.jsx)(a.td,{children:"Decimal type, indicates a fixed-precision decimal number"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"String"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.StringType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"string"})}),(0,n.jsx)(a.td,{children:"String type"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"FixedChar(length)"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.FixedCharType.of(length)"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"char(l)"})}),(0,n.jsx)(a.td,{children:"Char type, indicates a fixed-length string"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"VarChar(length)"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.VarCharType.of(length)"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"varchar(l)"})}),(0,n.jsx)(a.td,{children:"Varchar type, indicates a variable-length string, the length is the maximum length of the string"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Timestamp"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.TimestampType.withoutTimeZone()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"timestamp"})}),(0,n.jsx)(a.td,{children:"Timestamp type, indicates a timestamp without timezone"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"TimestampWithTimezone"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.TimestampType.withTimeZone()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"timestamp_tz"})}),(0,n.jsx)(a.td,{children:"Timestamp with timezone type, indicates a timestamp with timezone"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Date"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.DateType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"date"})}),(0,n.jsx)(a.td,{children:"Date type"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Time"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.TimeType.withoutTimeZone()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"time"})}),(0,n.jsx)(a.td,{children:"Time type"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"IntervalToYearMonth"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.IntervalYearType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"interval_year"})}),(0,n.jsx)(a.td,{children:"Interval type, indicates an interval of year and month"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"IntervalToDayTime"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.IntervalDayType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"interval_day"})}),(0,n.jsx)(a.td,{children:"Interval type, indicates an interval of day and time"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Fixed(length)"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.FixedType.of(length)"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"fixed(l)"})}),(0,n.jsx)(a.td,{children:"Fixed type, indicates a fixed-length binary array"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Binary"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.BinaryType.get()"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"binary"})}),(0,n.jsx)(a.td,{children:"Binary type, indicates a arbitrary-length binary array"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"List"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.ListType.of(elementType, elementNullable)"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"type": "list", "containsNull": JSON Boolean, "elementType": type JSON}'})}),(0,n.jsx)(a.td,{children:"List type, indicate a list of elements with the same type"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Map"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.MapType.of(keyType, valueType)"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"type": "map", "keyType": type JSON, "valueType": type JSON, "valueContainsNull": JSON Boolean}'})}),(0,n.jsx)(a.td,{children:"Map type, indicate a map of key-value pairs"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Struct"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.StructType.of([Types.StructType.Field.of(name, type, nullable)])"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"type": "struct", "fields": [JSON StructField, {"name": string, "type": type JSON, "nullable": JSON Boolean, "comment": string}]}'})}),(0,n.jsx)(a.td,{children:"Struct type, indicate a struct of fields"})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Union"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"Types.UnionType.of([type1, type2, ...])"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"type": "union", "types": [type JSON, ...]}'})}),(0,n.jsx)(a.td,{children:"Union type, indicate a union of types"})]})]})]}),"\n",(0,n.jsxs)(a.p,{children:["The related java doc is ",(0,n.jsx)(a.a,{href:"pathname:///docs/0.3.0/api/java/com/datastrato/gravitino/rel/types/Type.html",children:"here"}),"."]}),"\n",(0,n.jsx)(a.h4,{id:"table-property-and-type-mapping",children:"Table property and type mapping"}),"\n",(0,n.jsx)(a.p,{children:"The following is the table property that Gravitino supports:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Catalog provider"}),(0,n.jsx)(a.th,{children:"Table property"}),(0,n.jsx)(a.th,{children:"Type mapping"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"hive"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/apache-hive-catalog#table-properties",children:"Hive table property"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/apache-hive-catalog#table-column-types",children:"Hive type mapping"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"lakehouse-iceberg"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/lakehouse-iceberg-catalog#table-properties",children:"Iceberg table property"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/lakehouse-iceberg-catalog#table-column-types",children:"Iceberg type mapping"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"jdbc-mysql"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-mysql-catalog#table-properties",children:"MySQL table property"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-mysql-catalog#table-column-types",children:"MySQL type mapping"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"jdbc-postgresql"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-postgresql-catalog#table-properties",children:"PostgreSQL table property"})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"/docs/0.3.0/jdbc-postgresql-catalog#table-column-types",children:"PostgreSQL type mapping"})})]})]})]}),"\n",(0,n.jsx)(a.p,{children:"In addition to the basic settings, Gravitino supports the following features:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Feature"}),(0,n.jsx)(a.th,{children:"Description"}),(0,n.jsx)(a.th,{children:"Java doc"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Partitioned table"}),(0,n.jsxs)(a.td,{children:["Equal to ",(0,n.jsx)(a.code,{children:"PARTITION BY"})," in Apache Hive and other engine that support partitioning."]}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"pathname:///docs/0.3.0/api/java/com/datastrato/gravitino/dto/rel/partitions/Partitioning.html",children:"Partition"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Bucketed table"}),(0,n.jsxs)(a.td,{children:["Equal to ",(0,n.jsx)(a.code,{children:"CLUSTERED BY"})," in Apache Hive, some engine may use different words to describe it."]}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"pathname:///docs/0.3.0/api/java/com/datastrato/gravitino/rel/expressions/distributions/Distribution.html",children:"Distribution"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Sorted order table"}),(0,n.jsxs)(a.td,{children:["Equal to ",(0,n.jsx)(a.code,{children:"SORTED BY"})," in Apache Hive, some engine may use different words to describe it."]}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.a,{href:"pathname:///docs/0.3.0/api/java/com/datastrato/gravitino/rel/expressions/sorts/SortOrder.html",children:"SortOrder"})})]})]})]}),"\n",(0,n.jsx)(a.admonition,{type:"tip",children:(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.strong,{children:"Not all catalogs may support those features."}),". Please refer to the related document for more details."]})}),"\n",(0,n.jsx)(a.p,{children:"The following is an example of creating a partitioned, bucketed table and sorted order table:"}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X POST -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "name": "table",\n  "columns": [\n    {\n      "name": "id",\n      "type": "integer",\n      "nullable": true,\n      "comment": "Id of the user"\n    },\n    {\n      "name": "name",\n      "type": "varchar(2000)",\n      "nullable": true,\n      "comment": "Name of the user"\n    },\n    {\n      "name": "age",\n      "type": "short",\n      "nullable": true,\n      "comment": "Age of the user"\n    },\n    {\n      "name": "score",\n      "type": "double",\n      "nullable": true,\n      "comment": "Score of the user"\n    }\n  ],\n  "comment": "Create a new Table",\n  "properties": {\n    "format": "ORC"\n  },\n  "partitioning": [\n    {\n      "strategy": "identity",\n      "fieldName": ["score"]\n    }\n  ],\n  "distribution": {\n    "strategy": "hash",\n    "number": 4,\n    "funcArgs": [\n      {\n        "type": "field",\n        "fieldName": ["score"]\n      }\n    ]\n  },\n  "sortOrders": [\n    {\n      "direction": "asc",\n      "nullOrder": "NULLS_LAST",\n      "sortTerm":  {\n        "type": "field",\n        "fieldName": ["name"]\n      }\n    }\n  ]\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'tableCatalog.createTable(\n    NameIdentifier.of("metalake", "hive_catalog", "schema", "table"),\n    new ColumnDTO[] {\n    ColumnDTO.builder()\n    .withComment("Id of the user")\n    .withName("id")\n    .withDataType(Types.IntegerType.get())\n    .withNullable(true)\n    .build(),\n    ColumnDTO.builder()\n    .withComment("Name of the user")\n    .withName("name")\n    .withDataType(Types.VarCharType.of(1000))\n    .withNullable(true)\n    .build(),\n    ColumnDTO.builder()\n    .withComment("Age of the user")\n    .withName("age")\n    .withDataType(Types.ShortType.get())\n    .withNullable(true)\n    .build(),\n\n    ColumnDTO.builder()\n    .withComment("Score of the user")\n    .withName("score")\n    .withDataType(Types.DoubleType.get())\n    .withNullable(true)\n    .build(),\n    },\n    "Create a new Table",\n    tablePropertiesMap,\n    new Transform[] {\n    // Partition by id\n    Transforms.identity("score")\n    },\n    // CLUSTERED BY id\n    new DistributionDTO.Builder()\n    .withStrategy(Strategy.HASH)\n    .withNumber(4)\n    .withArgs(FieldReferenceDTO.of("id"))\n    .build(),\n    // SORTED BY name asc\n    new SortOrderDTO[] {\n    new SortOrderDTO.Builder()\n    .withDirection(SortDirection.ASCENDING)\n    .withNullOrder(NullOrdering.NULLS_LAST)\n    .withSortTerm(FieldReferenceDTO.of("name"))\n    .build()\n    }\n    );\n'})})})]}),"\n",(0,n.jsx)(a.admonition,{type:"note",children:(0,n.jsx)(a.p,{children:"The code above is an example of creating a Hive table. For other catalogs, the code is similar, but the supported column type, table properties may be different. For more details, please refer to the related doc."})}),"\n",(0,n.jsx)(a.h3,{id:"load-a-table",children:"Load a table"}),"\n",(0,n.jsxs)(a.p,{children:["You can load a table by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables/{table_name}"})," endpoint or just use the Gravitino Java client. The following is an example of loading a table:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json"  \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables/table\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\ntableCatalog.loadTable(NameIdentifier.of("metalake", "hive_catalog", "schema", "table"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"alter-a-table",children:"Alter a table"}),"\n",(0,n.jsxs)(a.p,{children:["You can modify a table by sending a ",(0,n.jsx)(a.code,{children:"PUT"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables/{table_name}"})," endpoint or just use the Gravitino Java client. The following is an example of modifying a table:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X PUT -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" -d \'{\n  "updates": [\n    {\n      "@type": "removeProperty",\n      "property": "key2"\n    }, {\n      "@type": "setProperty",\n      "property": "key3",\n      "value": "value3"\n    }\n}\' http://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables/table\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\n\nTable t = tableCatalog.alterTable(NameIdentifier.of("metalake", "catalog", "schema", "table"),\n    TableChange.rename("table_renamed"), TableChange.updateComment("xxx"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.p,{children:"Currently, Gravitino supports the following changes to a table:"}),"\n",(0,n.jsxs)(a.table,{children:[(0,n.jsx)(a.thead,{children:(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.th,{children:"Supported modification"}),(0,n.jsx)(a.th,{children:"JSON"}),(0,n.jsx)(a.th,{children:"Java"})]})}),(0,n.jsxs)(a.tbody,{children:[(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Rename table"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"rename","newName":"table_renamed"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'TableChange.rename("table_renamed")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update comment"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateComment","newComment":"new_comment"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'TableChange.updateComment("new_comment")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Set a table property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"setProperty","property":"key1","value":"value1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'TableChange.setProperty("key1", "value1")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Remove a table property"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"removeProperty","property":"key1"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'TableChange.removeProperty("key1")'})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Add a column"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"addColumn","fieldName":["position"],"type":"varchar(20)","comment":"Position of user","position":"FIRST"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"TableChange.addColumn(...)"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Delete a column"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"deleteColumn","fieldName": ["name"], "ifExists": true}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"TableChange.deleteColumn(...)"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Rename a column"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"renameColumn","oldFieldName":["name_old"], "newFieldName":"name_new"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"TableChange.renameColumn(...)"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update the column comment"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateColumnComment", "fieldName": ["name"], "newComment": "new comment"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"TableChange.updateColumnCommment(...)"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update the type of a column"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateColumnType","fieldName": ["name"], "newType":"varchar(100)"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"TableChange.updateColumnType(...)"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update the nullability of a column"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateColumnNullability","fieldName": ["name"],"nullable":true}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"TableChange.updateColumnNullability(...)"})})]}),(0,n.jsxs)(a.tr,{children:[(0,n.jsx)(a.td,{children:"Update the position of a column"}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:'{"@type":"updateColumnPosition","fieldName": ["name"], "newPosition":"default"}'})}),(0,n.jsx)(a.td,{children:(0,n.jsx)(a.code,{children:"TableChange.updateColumnPosition(...)"})})]})]})]}),"\n",(0,n.jsx)(a.h3,{id:"drop-a-table",children:"Drop a table"}),"\n",(0,n.jsxs)(a.p,{children:["You can remove a table by sending a ",(0,n.jsx)(a.code,{children:"DELETE"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables/{table_name}"})," endpoint or just use the Gravitino Java client. The following is an example of dropping a table:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X DELETE -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables/table\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\ntableCatalog.dropTable(NameIdentifier.of("metalake", "catalog", "schema", "table"));\n// ...\n'})})})]}),"\n",(0,n.jsx)(a.h3,{id:"list-all-tables-under-a-schema",children:"List all tables under a schema"}),"\n",(0,n.jsxs)(a.p,{children:["You can list all tables in a schema by sending a ",(0,n.jsx)(a.code,{children:"GET"})," request to the ",(0,n.jsx)(a.code,{children:"/api/metalakes/{metalake_name}/catalogs/{catalog_name}/schemas/{schema_name}/tables"})," endpoint or just use the Gravitino Java client. The following is an example of list all tables in a schema:"]}),"\n",(0,n.jsxs)(s.Z,{children:[(0,n.jsx)(i.default,{value:"bash",label:"Bash",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:'curl -X GET -H "Accept: application/vnd.gravitino.v1+json" \\\n-H "Content-Type: application/json" \\\nhttp://localhost:8090/api/metalakes/metalake/catalogs/catalog/schemas/schema/tables\n'})})}),(0,n.jsx)(i.default,{value:"java",label:"Java",children:(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// ...\n// Assuming you have just created a Hive catalog named `hive_catalog`\nCatalog catalog = gravitinoMetaLake.loadCatalog(NameIdentifier.of("metalake", "catalog"));\n\nTableCatalog tableCatalog = catalog.asTableCatalog();\nNameIdentifier[] identifiers =\n    tableCatalog.listTables(Namespace.ofTable("metalake", "catalog", "schema"));\n// ...\n'})})})]})]})}function m(e={}){const{wrapper:a}={...(0,l.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},53765:(e,a,t)=>{t.r(a),t.d(a,{default:()=>i});t(52983);var n=t(28934);const l={tabItem:"tabItem_tTMw"};var s=t(97458);function i(e){let{children:a,hidden:t,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,i),hidden:t,children:a})}},30982:(e,a,t)=>{t.d(a,{Z:()=>m});var n=t(52983),l=t(28934),s=t(66673),i=t(78220),r=t(45727);const o={tabList:"tabList_TRo0",tabItem:"tabItem_P1gs"};var c=t(97458);function d(e){let{className:a,block:t,selectedValue:n,selectValue:i,tabValues:r}=e;const d=[],{blockElementScrollPositionUntilNextRender:h}=(0,s.o5)(),p=e=>{const a=e.currentTarget,t=d.indexOf(a),l=r[t].value;l!==n&&(h(a),i(l))},m=e=>{let a=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;a=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;a=d[t]??d[d.length-1];break}}a?.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a),children:r.map((e=>{let{value:a,label:t,attributes:s}=e;return(0,c.jsx)("li",{role:"tab",tabIndex:n===a?0:-1,"aria-selected":n===a,ref:e=>d.push(e),onKeyDown:m,onClick:p,...s,className:(0,l.Z)("tabs__item",o.tabItem,s?.className,{"tabs__item--active":n===a}),children:t??a},a)}))})}function h(e){let{lazy:a,children:t,selectedValue:l}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=s.find((e=>e.props.value===l));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:s.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==l})))})}function p(e){const a=(0,i.Y)(e);return(0,c.jsxs)("div",{className:(0,l.Z)("tabs-container",o.tabList),children:[(0,c.jsx)(d,{...e,...a}),(0,c.jsx)(h,{...e,...a})]})}function m(e){const a=(0,r.default)();return(0,c.jsx)(p,{...e,children:(0,i.h)(e.children)},String(a))}},78220:(e,a,t)=>{t.d(a,{Y:()=>m,h:()=>c});var n=t(52983),l=t(33729),s=t(57931),i=t(13023),r=t(5157),o=t(21441);function c(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??function(e){return c(e).map((e=>{let{props:{value:a,label:t,attributes:n,default:l}}=e;return{value:a,label:t,attributes:n,default:l}}))}(t);return function(e){const a=(0,r.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function h(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function p(e){let{queryString:a=!1,groupId:t}=e;const s=(0,l.k6)(),r=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,i._X)(r),(0,n.useCallback)((e=>{if(!r)return;const a=new URLSearchParams(s.location.search);a.set(r,e),s.replace({...s.location,search:a.toString()})}),[r,s])]}function m(e){const{defaultValue:a,queryString:t=!1,groupId:l}=e,i=d(e),[r,c]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!h({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:a,tabValues:i}))),[m,j]=p({queryString:t,groupId:l}),[u,x]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[l,s]=(0,o.Nk)(t);return[l,(0,n.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:l}),g=(()=>{const e=m??u;return h({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{g&&c(g)}),[g]);return{selectedValue:r,selectValue:(0,n.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),j(e),x(e)}),[j,x,i]),tabValues:i}}},37627:(e,a,t)=>{t.d(a,{Z:()=>r,a:()=>i});var n=t(52983);const l={},s=n.createContext(l);function i(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);