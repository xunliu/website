"use strict";(self.webpackChunkdatastrato_next=self.webpackChunkdatastrato_next||[]).push([[8015],{6025:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>h});var i=e(97458),n=e(37627),s=e(81901);const r={index_title:"Database Partitioning",title:"What Is Database Partitioning?",wrapperClassName:"career"},o="What Is Database Partitioning?",d={type:"mdx",permalink:"/glossary/database-partitioning",source:"@site/src/pages/glossary/database-partitioning.md",title:"What Is Database Partitioning?",description:"Database partitioning (or data partitioning) is a technique used to split data",frontMatter:{index_title:"Database Partitioning",title:"What Is Database Partitioning?",wrapperClassName:"career"},unlisted:!1},l={},h=[{value:"Advantages of database partitioning",id:"advantages-of-database-partitioning",level:2},{value:"Database partitioning vs. sharding",id:"database-partitioning-vs-sharding",level:2},{value:"Types of database partitioning",id:"types-of-database-partitioning",level:2},{value:"Vertical partitioning",id:"vertical-partitioning",level:3},{value:"Horizontal partitioning",id:"horizontal-partitioning",level:3},{value:"Partitioning in Datastrato",id:"partitioning-in-datastrato",level:2},{value:"Additional resources",id:"additional-resources",level:2}];function c(t){const a={a:"a",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h1,{id:"what-is-database-partitioning",children:"What Is Database Partitioning?"}),"\n",(0,i.jsx)(a.p,{children:"Database partitioning (or data partitioning) is a technique used to split data\nin a large database into smaller chunks called partitions. Each partition is\nthen stored and accessed separately to improve the performance and scalability\nof the database system."}),"\n",(0,i.jsx)(a.p,{children:"Database partitioning strategies apply to different types of databases such as\nSQL databases (e.g., MySQL, PostgreSQL), NoSQL databases (e.g., MongoDB,\nCassandra), or time-series databases like Datastrato."}),"\n",(0,i.jsx)(a.h2,{id:"advantages-of-database-partitioning",children:"Advantages of database partitioning"}),"\n",(0,i.jsx)(a.p,{children:"The primary motivation for database partitioning is to improve the performance\nand scalability of large databases by distributing the data that can be accessed\nindependently."}),"\n",(0,i.jsx)(a.p,{children:"By dividing the data into partitions, databases can avoid reading from\npartitions that are not needed for queries that only need a subset of the data\ncollocated in a partition. This allows the database to reduce expensive disk I/O\ncalls and return the data much quicker."}),"\n",(0,i.jsx)(a.h2,{id:"database-partitioning-vs-sharding",children:"Database partitioning vs. sharding"}),"\n",(0,i.jsx)(a.p,{children:"Database partitioning deals with a single database instance, whereas sharding\nsplits partitions (shards) across multiple database instances for scalability\nand availability."}),"\n",(0,i.jsx)(a.p,{children:"When a database is sharded, partitions are stored and managed by discrete\nservers that may run in different VMs, zones, or regions. Shards can even be\nreplicated across servers to service more requests concurrently."}),"\n",(0,i.jsx)(a.p,{children:"Finally, individual shards can be backed up, restored, or repaired independently\nto minimize the impact of hardware failures on a single database."}),"\n",(0,i.jsx)(a.h2,{id:"types-of-database-partitioning",children:"Types of database partitioning"}),"\n",(0,i.jsx)(a.p,{children:"There are two major types of database partitioning approaches:"}),"\n",(0,i.jsx)(a.h3,{id:"vertical-partitioning",children:"Vertical partitioning"}),"\n",(0,i.jsx)(s.Z,{alt:"Diagram showing an example of vertical partitioning",height:342,src:"/img/glossary/data-partitioning/vertical-partitioning.webp",width:900,title:"Vertical partitioning"}),"\n",(0,i.jsx)(a.p,{children:"In vertical partitioning, columns of a table are divided into partitions with\neach partition containing one or more columns from the table. This approach is\nuseful when some columns are accessed more frequently than others."}),"\n",(0,i.jsx)(a.p,{children:"Data partitioning is often combined with sharding: frequently accessed columns\nmay be split into different partitions and sharded to run on discrete servers.\nAlternatively, columns that are rarely used may be partitioned to a cheaper and\nslower storage solution to reduce the I/O overhead."}),"\n",(0,i.jsx)(a.p,{children:"One of the downsides to vertical partitioning is that when a query needs to span\nmultiple partitions, combining the results from those partitions may be slow or\ncomplicated. Also, as the database scales, partitions may need to be split even\nfurther to meet the demand."}),"\n",(0,i.jsx)(a.h3,{id:"horizontal-partitioning",children:"Horizontal partitioning"}),"\n",(0,i.jsx)(s.Z,{alt:"Diagram showing an example of horizontal partitioning",height:342,src:"/img/glossary/data-partitioning/horizontal-partitioning.webp",width:900,title:"Horizontal partitioning"}),"\n",(0,i.jsx)(a.p,{children:"On the other hand, horizontal partitioning works by splitting the table by rows\nbased on the partition key. In this approach, each row of the table is assigned\nto a partition based on some criteria, which include:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Range-based partitioning"}),": data is split based on a range that does not\noverlap. The most common example is partitioning by time on time-series\nworkloads. Data can be partitioned by some time interval (e.g., daily, weekly,\nmonthly) to aid range-based search. Old partitions can easily be archived to\nserve queries for newer ranges more efficiently."]}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"List-based partitioning"}),": data is split based on discrete sets of values,\nusually from a particular column."]}),"\n",(0,i.jsx)(a.p,{children:"For example, a table containing sales data may be partitioned by geo-regions\nsuch as North America or Asia-Pacific regions. Partitions may be further split\ninto subsections."}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Hash-based partitioning"}),": data is split based on some hashing algorithm.\nHash-based partitioning applies a hash function to one or more columns to\ndetermine which partition to send the request to."]}),"\n",(0,i.jsx)(a.p,{children:"For example, we may use a simple modulo function on the employee id field or\nuse a complicated cryptographic hashing function on an IP address to divide\nthe data. When a non-trivial hash function is used, hash-based partitioning\ntends to distribute the data evenly across partitions. However, depending on\nthe function, adding or removing a new partition may require an expensive\nmigration process."}),"\n"]}),"\n",(0,i.jsxs)(a.li,{children:["\n",(0,i.jsxs)(a.p,{children:[(0,i.jsx)(a.strong,{children:"Composite partitioning"}),": any of the aforementioned methods can be combined. For\nexample, a time-series workload may first be partitioned by time and further\nsplit based on another column field."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.p,{children:"One thing to note with horizontal partitioning is that the performance depends\nheavily on how evenly distributed the data is across the partitions. If the\ndata distribution is skewed, the partition with the most records will become\nthe bottleneck."}),"\n",(0,i.jsxs)(a.p,{children:["Also, most analytical databases employ horizontal partitioning strategies over\nvertical partitioning. Some popular file formats such as\n",(0,i.jsx)(a.a,{href:"https://parquet.apache.org/docs/file-format/",children:"Apache Parquet"})," support\npartitioning natively, making it ideal for big data processing."]}),"\n",(0,i.jsx)(a.h2,{id:"partitioning-in-datastrato",children:"Partitioning in Datastrato"}),"\n",(0,i.jsxs)(a.p,{children:["Datastrato supports\n",(0,i.jsx)(a.a,{href:"https://datastrato.com/docs/concept/partitions/",children:"data partitioning"})," by intervals\nof time, including hour, day, week, month, and year. Tables that are partitioned\nby time perform better for timestamp interval searches, as Datastrato\u2019s SQL\noptimizer leverages partitioning to reduce disk I/O."]}),"\n",(0,i.jsxs)(a.p,{children:["Datastrato also supports\n",(0,i.jsx)(a.a,{href:"/docs/reference/sql/alter-table-attach-partition/",children:"attaching"})," or\n",(0,i.jsx)(a.a,{href:"https://datastrato.com/docs/reference/sql/alter-table-detach-partition/",children:"detaching"}),"\npartitions to archive data for storage optimization."]}),"\n",(0,i.jsx)(a.h2,{id:"additional-resources",children:"Additional resources"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsx)(a.li,{children:(0,i.jsx)(a.a,{href:"/blog/2022/11/02/data-lifecycle-questdb/",children:"Data Lifecycle with Datastrato"})}),"\n"]})]})}function p(t={}){const{wrapper:a}={...(0,n.a)(),...t.components};return a?(0,i.jsx)(a,{...t,children:(0,i.jsx)(c,{...t})}):c(t)}},81901:(t,a,e)=>{e.d(a,{Z:()=>p});var i=e(28934);e(52983);const n="image_yt7U",s="shadow_K2GZ",r="margin_cHYA",o="title_SOBy",d="small_nBvZ",l="caption_iPQj";var h=e(97458);const c=t=>{let{alt:a,height:e,margin:c,shadow:p,small:g,src:m,title:u,width:b}=t;return(0,h.jsxs)("figure",{children:[(0,h.jsx)("img",{alt:a,className:(0,i.Z)(n,{[r]:c,[s]:p,[d]:g,[o]:null!=u}),height:e,src:m,width:b,loading:"lazy"}),null!=u&&(0,h.jsx)("figcaption",{className:l,children:u})]})};c.defaultProps={margin:!0,shadow:!0,small:!1};const p=c},37627:(t,a,e)=>{e.d(a,{Z:()=>o,a:()=>r});var i=e(52983);const n={},s=i.createContext(n);function r(t){const a=i.useContext(s);return i.useMemo((function(){return"function"==typeof t?t(a):{...a,...t}}),[a,t])}function o(t){let a;return a=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:r(t.components),i.createElement(s.Provider,{value:a},t.children)}}}]);